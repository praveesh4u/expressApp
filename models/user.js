// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var _, bcrypt, helper, phonetic, saltRounds;

  bcrypt = require('bcrypt');

  saltRounds = 10;

  phonetic = require('phonetic');

  _ = require("underscore");

  helper = GLOBAL.helper;

  module.exports = function(sequelize, DataTypes) {
    var User;
    User = sequelize.define('User', {
      first_name: {
        type: DataTypes.STRING,
        length: 255,
        allowNull: false
      },
      email: {
        type: DataTypes.STRING,
        length: 255,
        allowNull: false
      },
      last_name: {
        type: DataTypes.STRING,
        length: 255,
        allowNull: true
      },
      bio: {
        type: DataTypes.TEXT,
        length: 24000,
        allowNull: false
      },
      password: {
        type: DataTypes.STRING,
        length: 255,
        allowNull: false
      },
      salt: {
        type: DataTypes.STRING
      }
    }, {
      underscored: true,
      timestamps: true,
      tableName: 'users',
      classMethods: {
        associate: function(models) {},
        findByEmail: function(email, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return User.find({
            where: {
              email: email
            }
          }).then(cb);
        },
        findById: function(id, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return User.find({
            where: {
              id: id
            }
          }).then(cb);
        },
        passwordMeetsRequirements: function(password) {
          if (password == null) {
            password = "";
          }
          if (password.length < 8) {
            return false;
          }
          if (!/[0-9]/.test(password)) {
            return false;
          }
          return true;
        },
        hashPassword: function(plainPassword, salt, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return bcrypt.hash(plainPassword, salt, function(err, hash) {
            if (err) {
              return cb(err, null);
            }
            return cb(null, hash);
          });
        },
        genSalt: function(saltRounds, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return bcrypt.genSalt(saltRounds, function(err, salt) {
            if (err) {
              return cb(err, null);
            }
            return cb(null, salt);
          });
        },
        createNewUser: function(data, callback) {
          var userData;
          userData = _.extend({}, data);
          console.log(userData);
          if (!User.passwordMeetsRequirements(userData.password)) {
            return callback("Your password doest not meet the minimum requirements. It must be at least 8 characters and contain at least one one number.", null);
          }
          console.log('passed');
          return User.genSalt(saltRounds, function(err, hash) {
            if (err) {
              return callback(err, null);
            }
            return helper.hashPassword(userData.password, hash, function(err, hashedPassword) {
              userData.password = hashedPassword;
              userData.salt = hash;
              return User.create(userData).then(callback);
            });
          });
        },
        generateUsername: function(seed) {
          return phonetic.generate({
            seed: seed
          });
        }
      },
      instanceMethods: {
        isValidPassword: function(password, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return helper.hashPassword(password, this.salt, (function(_this) {
            return function(err, hashedPassword) {
              var status;
              if (err) {
                return cb(err, null);
              }
              if (hashedPassword === _this.password) {
                status = true;
              } else {
                status = false;
              }
              return cb(null, status);
            };
          })(this));
        },
        hashPassword: function(plainPassword, salt, cb) {
          if (cb == null) {
            cb = function() {};
          }
          return bcrypt.hash(plainPassword, salt, function(err, hash) {
            if (err) {
              return cb(err, null);
            }
            return cb(null, hash);
          });
        }
      }
    });
    return User;
  };

}).call(this);
